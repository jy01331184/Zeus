import org.gradle.api.internal.artifacts.DefaultPublishArtifactSet
import org.gradle.api.internal.artifacts.mvnsettings.DefaultLocalMavenRepositoryLocator
import org.gradle.api.internal.artifacts.mvnsettings.DefaultMavenFileLocations
import org.gradle.api.internal.artifacts.mvnsettings.DefaultMavenSettingsProvider
import org.gradle.api.internal.artifacts.mvnsettings.LocalMavenRepositoryLocator
import org.gradle.api.internal.artifacts.publish.DefaultPublishArtifact

apply plugin: 'com.android.library'
apply plugin: 'maven'


android {
    compileSdkVersion 23
    buildToolsVersion "19.1.0"

    lintOptions {
        abortOnError false
    }

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 23
        //  targetSdkVersion 23

        versionCode 1
        versionName "1.0"
    }

    buildTypes {
        debug {
            ndk {
                moduleName "zeus"
                ldLibs "log", "z", "m", "jnigraphics"
//                cFlags "-std=gnu11"
                abiFilters "armeabi","x86"
            }
        }
        release {
            ndk {
                moduleName "zeus"
                ldLibs "log", "z", "m", "jnigraphics"
//                cFlags "-std=gnu11"
                abiFilters "armeabi","x86"
            }
        }
    }

}

group='com.zeussdk'
version='1.0.0'
dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
}

def mavenLocalRepo = ''
afterEvaluate {
    DefaultMavenFileLocations locations = new DefaultMavenFileLocations()
    DefaultMavenSettingsProvider provider = new DefaultMavenSettingsProvider(locations)
    LocalMavenRepositoryLocator locator = new DefaultLocalMavenRepositoryLocator(provider)

    mavenLocalRepo = locator.localMavenRepository.absolutePath
    uploadArchives {
        repositories {
            mavenDeployer {
                repository (url: uri(mavenLocalRepo))
//                repository (url: 'http://localhost:8081/repository/maven-releases/'){
//                    authentication(userName: "admin", password: "123")
//                }
            }
        }
    }

    Task uploadArchivesTask = tasks.findByName("uploadArchives")
    uploadArchivesTask.doFirst {
        Date date = new Date()

        DefaultPublishArtifactSet ass = it.configuration.getArtifacts()

        Task transformDex = tasks.findByName('transformClassesAndResourcesWithSyncLibJarsForRelease')
        transformDex.outputs.files.files.each {
            if(it.absolutePath.contains("/classes.jar"))
            {
                DefaultPublishArtifact jarFileArtifact = new DefaultPublishArtifact('', 'jar', 'jar', '', date, it, new Object[0])
                ass.add(jarFileArtifact)
            }
        }
    }
}

